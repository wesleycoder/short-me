-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

CREATE TABLE IF NOT EXISTS public.urls
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    url text COLLATE pg_catalog."default" NOT NULL,
    hash text COLLATE pg_catalog."default" NOT NULL,
    user_id uuid,
    public boolean NOT NULL DEFAULT true,
    access_count bigint NOT NULL DEFAULT '0'::bigint,
    last_access_at timestamp with time zone,
    created_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
    updated_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
    CONSTRAINT urls_pkey PRIMARY KEY (id),
    CONSTRAINT urls_hash_key UNIQUE (hash),
    CONSTRAINT urls_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.urls
    OWNER to postgres;

ALTER TABLE IF EXISTS public.urls
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.urls TO anon;

GRANT ALL ON TABLE public.urls TO authenticated;

GRANT ALL ON TABLE public.urls TO postgres;

GRANT ALL ON TABLE public.urls TO service_role;

COMMENT ON TABLE public.urls
    IS 'Hashed urls';
CREATE POLICY "Enable delete for users based on user_id"
    ON public.urls
    AS PERMISSIVE
    FOR DELETE
    TO public
    USING ((auth.uid() = user_id));
CREATE POLICY "Enable insert for all users"
    ON public.urls
    AS PERMISSIVE
    FOR INSERT
    TO public
    WITH CHECK (true);
CREATE POLICY "Enable read access to all users for public urls"
    ON public.urls
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING ((public = true));
CREATE POLICY "Enable update for users based on user_id"
    ON public.urls
    AS PERMISSIVE
    FOR UPDATE
    TO public
    USING ((auth.uid() = user_id))
    WITH CHECK ((auth.uid() = user_id));
